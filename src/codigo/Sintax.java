
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 28 09:41:50 CDT 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 28 09:41:50 CDT 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\017\000\002\002" +
    "\016\000\002\002\011\000\002\002\010\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\011\000\002" +
    "\004\011\000\002\006\011\000\002\006\013\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\007\015\000\002\010\011\000\002\011\013\000\002" +
    "\012\011\000\002\012\010\000\002\014\012\000\002\014" +
    "\011\000\002\005\005\000\002\005\004\000\002\005\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\010\006\004\011\005\040\006\001\002\000" +
    "\004\005\212\001\002\000\004\040\204\001\002\000\004" +
    "\032\011\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\033\012\001\002\000\004\034\013" +
    "\001\002\000\016\011\022\012\021\013\017\015\023\016" +
    "\015\017\027\001\002\000\020\011\ufff5\012\ufff5\013\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\035\ufff5\001\002\000\004\032" +
    "\176\001\002\000\020\011\ufff1\012\ufff1\013\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\035\ufff1\001\002\000\004\032\155\001" +
    "\002\000\020\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\035\ufffb\001\002\000\004\042\136\001\002\000" +
    "\006\030\122\042\121\001\002\000\004\034\111\001\002" +
    "\000\020\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\035\ufff7\001\002\000\020\011\ufff9\012\ufff9\013\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\035\ufff9\001\002\000\020\011" +
    "\022\012\021\013\017\015\023\016\015\017\027\035\110" +
    "\001\002\000\004\032\031\001\002\000\020\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\035\ufff3\001\002" +
    "\000\006\011\033\042\034\001\002\000\004\033\075\001" +
    "\002\000\004\042\066\001\002\000\004\020\035\001\002" +
    "\000\004\043\036\001\002\000\004\041\037\001\002\000" +
    "\010\031\042\042\043\043\040\001\002\000\004\026\064" +
    "\001\002\000\004\041\054\001\002\000\006\033\uffe5\041" +
    "\uffe5\001\002\000\004\026\044\001\002\000\012\010\046" +
    "\031\047\042\050\043\045\001\002\000\006\033\uffe3\041" +
    "\uffe3\001\002\000\006\010\051\042\052\001\002\000\006" +
    "\033\uffe4\041\uffe4\001\002\000\006\033\uffe1\041\uffe1\001" +
    "\002\000\006\033\uffe0\041\uffe0\001\002\000\004\010\053" +
    "\001\002\000\006\033\uffdf\041\uffdf\001\002\000\006\030" +
    "\056\042\057\001\002\000\004\033\uffd8\001\002\000\004" +
    "\042\063\001\002\000\006\027\060\030\061\001\002\000" +
    "\004\043\062\001\002\000\004\033\uffd6\001\002\000\004" +
    "\033\uffd7\001\002\000\004\033\uffd5\001\002\000\004\042" +
    "\065\001\002\000\006\033\uffe2\041\uffe2\001\002\000\004" +
    "\020\067\001\002\000\004\043\070\001\002\000\004\041" +
    "\071\001\002\000\010\031\042\042\043\043\040\001\002" +
    "\000\004\041\073\001\002\000\006\030\056\042\057\001" +
    "\002\000\004\033\uffd9\001\002\000\004\034\076\001\002" +
    "\000\020\011\022\012\021\013\017\015\023\016\015\017" +
    "\027\035\100\001\002\000\020\011\022\012\021\013\017" +
    "\015\023\016\015\017\027\035\106\001\002\000\020\011" +
    "\uffda\012\uffda\013\uffda\015\uffda\016\uffda\017\uffda\035\uffda" +
    "\001\002\000\020\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\035\ufff6\001\002\000\020\011\ufff2\012\ufff2" +
    "\013\ufff2\015\ufff2\016\ufff2\017\ufff2\035\ufff2\001\002\000" +
    "\020\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\035\ufffc\001\002\000\020\011\ufff8\012\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\035\ufff8\001\002\000\020\011\ufffa" +
    "\012\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\035\ufffa\001" +
    "\002\000\020\011\uffdb\012\uffdb\013\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\035\uffdb\001\002\000\020\011\ufff4\012\ufff4\013" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\035\ufff4\001\002\000\004" +
    "\002\ufffd\001\002\000\016\011\022\012\021\013\017\015" +
    "\023\016\015\017\027\001\002\000\020\011\022\012\021" +
    "\013\017\015\023\016\015\017\027\035\113\001\002\000" +
    "\004\016\114\001\002\000\004\032\115\001\002\000\010" +
    "\031\042\042\043\043\040\001\002\000\004\033\117\001" +
    "\002\000\004\041\120\001\002\000\020\011\uffdc\012\uffdc" +
    "\013\uffdc\015\uffdc\016\uffdc\017\uffdc\035\uffdc\001\002\000" +
    "\012\020\130\027\125\030\127\041\126\001\002\000\004" +
    "\042\123\001\002\000\004\041\124\001\002\000\020\011" +
    "\uffec\012\uffec\013\uffec\015\uffec\016\uffec\017\uffec\035\uffec" +
    "\001\002\000\004\043\134\001\002\000\020\011\ufff0\012" +
    "\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\035\ufff0\001\002" +
    "\000\004\041\133\001\002\000\004\043\131\001\002\000" +
    "\004\041\132\001\002\000\020\011\uffee\012\uffee\013\uffee" +
    "\015\uffee\016\uffee\017\uffee\035\uffee\001\002\000\020\011" +
    "\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\035\uffed" +
    "\001\002\000\004\041\135\001\002\000\020\011\uffef\012" +
    "\uffef\013\uffef\015\uffef\016\uffef\017\uffef\035\uffef\001\002" +
    "\000\006\020\140\027\137\001\002\000\004\010\147\001" +
    "\002\000\004\010\141\001\002\000\006\010\142\042\143" +
    "\001\002\000\004\041\146\001\002\000\004\010\144\001" +
    "\002\000\004\041\145\001\002\000\020\011\uffe8\012\uffe8" +
    "\013\uffe8\015\uffe8\016\uffe8\017\uffe8\035\uffe8\001\002\000" +
    "\020\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea" +
    "\035\uffea\001\002\000\006\010\150\042\151\001\002\000" +
    "\004\041\154\001\002\000\004\010\152\001\002\000\004" +
    "\041\153\001\002\000\020\011\uffe9\012\uffe9\013\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\035\uffe9\001\002\000\020\011\uffeb" +
    "\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\035\uffeb\001" +
    "\002\000\010\031\042\042\043\043\156\001\002\000\004" +
    "\026\170\001\002\000\004\033\160\001\002\000\004\034" +
    "\161\001\002\000\016\011\022\012\021\013\017\015\023" +
    "\016\015\017\027\001\002\000\020\011\022\012\021\013" +
    "\017\015\023\016\015\017\027\035\163\001\002\000\022" +
    "\011\uffe7\012\uffe7\013\uffe7\014\164\015\uffe7\016\uffe7\017" +
    "\uffe7\035\uffe7\001\002\000\004\034\165\001\002\000\016" +
    "\011\022\012\021\013\017\015\023\016\015\017\027\001" +
    "\002\000\020\011\022\012\021\013\017\015\023\016\015" +
    "\017\027\035\167\001\002\000\020\011\uffde\012\uffde\013" +
    "\uffde\015\uffde\016\uffde\017\uffde\035\uffde\001\002\000\006" +
    "\042\065\043\171\001\002\000\004\033\172\001\002\000" +
    "\004\034\173\001\002\000\016\011\022\012\021\013\017" +
    "\015\023\016\015\017\027\001\002\000\020\011\022\012" +
    "\021\013\017\015\023\016\015\017\027\035\175\001\002" +
    "\000\020\011\uffe6\012\uffe6\013\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\035\uffe6\001\002\000\010\031\042\042\043\043\040" +
    "\001\002\000\004\033\200\001\002\000\004\034\201\001" +
    "\002\000\016\011\022\012\021\013\017\015\023\016\015" +
    "\017\027\001\002\000\020\011\022\012\021\013\017\015" +
    "\023\016\015\017\027\035\203\001\002\000\020\011\uffdd" +
    "\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\035\uffdd\001" +
    "\002\000\004\032\205\001\002\000\004\033\206\001\002" +
    "\000\004\034\207\001\002\000\016\011\022\012\021\013" +
    "\017\015\023\016\015\017\027\001\002\000\020\011\022" +
    "\012\021\013\017\015\023\016\015\017\027\035\211\001" +
    "\002\000\004\002\ufffe\001\002\000\004\026\213\001\002" +
    "\000\004\004\214\001\002\000\004\026\215\001\002\000" +
    "\004\041\216\001\002\000\006\011\220\040\217\001\002" +
    "\000\004\032\227\001\002\000\004\040\221\001\002\000" +
    "\004\032\222\001\002\000\004\033\223\001\002\000\004" +
    "\034\224\001\002\000\016\011\022\012\021\013\017\015" +
    "\023\016\015\017\027\001\002\000\020\011\022\012\021" +
    "\013\017\015\023\016\015\017\027\035\226\001\002\000" +
    "\004\002\000\001\002\000\004\033\230\001\002\000\004" +
    "\034\231\001\002\000\016\011\022\012\021\013\017\015" +
    "\023\016\015\017\027\001\002\000\020\011\022\012\021" +
    "\013\017\015\023\016\015\017\027\035\233\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\025\004\017\006\024\007\023\010\013\011\027\012\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\102\006\104\007\103\010\100" +
    "\011\106\012\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\071\001\001\000\002" +
    "\001\001\000\004\005\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\076\004\017\006\024\007\023" +
    "\010\013\011\027\012\015\001\001\000\016\004\102\006" +
    "\104\007\103\010\100\011\106\012\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\111\004" +
    "\017\006\024\007\023\010\013\011\027\012\015\001\001" +
    "\000\016\004\102\006\104\007\103\010\100\011\106\012" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\161\004\017\006\024\007\023" +
    "\010\013\011\027\012\015\001\001\000\016\004\102\006" +
    "\104\007\103\010\100\011\106\012\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\165\004\017\006" +
    "\024\007\023\010\013\011\027\012\015\001\001\000\016" +
    "\004\102\006\104\007\103\010\100\011\106\012\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\173\004\017\006\024\007" +
    "\023\010\013\011\027\012\015\001\001\000\016\004\102" +
    "\006\104\007\103\010\100\011\106\012\101\001\001\000" +
    "\002\001\001\000\004\013\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\201\004\017\006\024\007" +
    "\023\010\013\011\027\012\015\001\001\000\016\004\102" +
    "\006\104\007\103\010\100\011\106\012\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\207\004\017\006\024\007\023\010" +
    "\013\011\027\012\015\001\001\000\016\004\102\006\104" +
    "\007\103\010\100\011\106\012\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\224\004\017\006\024\007\023\010" +
    "\013\011\027\012\015\001\001\000\016\004\102\006\104" +
    "\007\103\010\100\011\106\012\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\231" +
    "\004\017\006\024\007\023\010\013\011\027\012\015\001" +
    "\001\000\016\004\102\006\104\007\103\010\100\011\106" +
    "\012\101\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado ="";
    public Nodo padre;
    public int contador = 1;
    
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= If Parentesis_a Numero Op_relacional Numero Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		
        Nodo tmp = new Nodo("DECLARACION");

        Nodo n1 = new Nodo("Igual");
        n1.setNumNodo(parser.contador++);
        n1.setValor("=");
        tmp.addHijo((Nodo) n1);
        tmp.setNumNodo(parser.contador++);

        Nodo n2 = new Nodo("Identificador");
        n2.setNumNodo(parser.contador++);
        n2.setValor("Variable");
        n1.addHijo((Nodo) n2);
        n1.setNumNodo(parser.contador++);

        Nodo n3 = new Nodo("T_dato");
        n3.setNumNodo(parser.contador++);
        n3.setValor("Tipo_Dato");
        n2.addHijo((Nodo) n3);
        n2.setNumNodo(parser.contador++);


        Nodo n4 = new Nodo("Numero");
        n4.setNumNodo(parser.contador++);
        n4.setValor("Numero");
        n1.addHijo((Nodo) n4);
        n1.setNumNodo(parser.contador++);

        Nodo n5 = new Nodo("P_coma");
        n5.setNumNodo(parser.contador++);
        n5.setValor(";");
        n4.addHijo((Nodo) n5);
        n4.setNumNodo(parser.contador++);
       
        
        RESULT = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		
    Nodo tmp = new Nodo("DECLARACION");

    Nodo n1 = new Nodo("Identificador");
    n1.setNumNodo(parser.contador++);
    n1.setValor("Variable");
    tmp.addHijo((Nodo) n1);
    tmp.setNumNodo(parser.contador++);
    
    Nodo n2 = new Nodo("T_Dato");
    n2.setNumNodo(parser.contador++);
    n2.setValor("Tipo_Dato");
    n1.addHijo((Nodo) n2);
    n1.setNumNodo(parser.contador++);

    Nodo n3 = new Nodo("P_coma");
    n3.setNumNodo(parser.contador++);
    n3.setValor(";");
    n1.addHijo((Nodo) n3);
    n1.setNumNodo(parser.contador++);

    RESULT = tmp;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        tmp.addHijo((Nodo) n2);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        tmp.addHijo((Nodo) n2);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        tmp.addHijo((Nodo) n2);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        tmp.addHijo((Nodo) n2);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        tmp.addHijo((Nodo) n2);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo tmp = new Nodo("SENTENCIA");
        tmp.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n1);
        tmp.addHijo((Nodo) n2);
        RESULT  = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Hashtag Include Op_relacional Libreria Op_relacional P_coma Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Hashtag Include Op_relacional Libreria Op_relacional P_coma T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo tmp = new Nodo("Inicio");
        //tmp.setNumNodo(parser.contador++);

        Nodo n5 = new Nodo("Libreria");
        n5.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n5);
        tmp.setNumNodo(parser.contador++);
        
        Nodo n4 = new Nodo("Op_relacional");
        n4.setNumNodo(parser.contador++);
        n4.setValor("<");
        n5.addHijo((Nodo) n4);
        n5.setNumNodo(parser.contador++);

        Nodo n3 = new Nodo("Hashtag");
        n3.setNumNodo(parser.contador++);
        n3.setValor("#");
        n4.addHijo((Nodo) n3);
        n4.setNumNodo(parser.contador++);

        Nodo n6 = new Nodo("Op_relacional");
        n6.setNumNodo(parser.contador++);
        n6.setValor(">");
        n5.addHijo((Nodo) n6);
        n5.setNumNodo(parser.contador++);
    

        Nodo n7 = new Nodo("P_coma");
        n7.setNumNodo(parser.contador++);
        n7.setValor(";");
        n6.addHijo((Nodo) n7);
        n6.setNumNodo(parser.contador++);

        Nodo n8 = new Nodo("T_Dato");
        n8.setNumNodo(parser.contador++);
        n8.setValor("Tipo_Dato");
        tmp.addHijo((Nodo) n8);
        tmp.setNumNodo(parser.contador++);

        Nodo n9 = new Nodo("Main");
        n9.setNumNodo(parser.contador++);
        tmp.addHijo((Nodo) n9);
        tmp.setNumNodo(parser.contador++);

        Nodo n10 = new Nodo("Parentesis_a");
        n10.setNumNodo(parser.contador++);
        n10.setValor("(");
        tmp.addHijo((Nodo) n10);
        tmp.setNumNodo(parser.contador++);

        Nodo n11 = new Nodo("Parentesis_c");
        n11.setNumNodo(parser.contador++);
        n11.setValor(")");
        tmp.addHijo((Nodo) n11);
        tmp.setNumNodo(parser.contador++);

        Nodo n12 = new Nodo("Llave_a");
        n12.setNumNodo(parser.contador++);
        n12.setValor("{");
        tmp.addHijo((Nodo) n12);
        tmp.setNumNodo(parser.contador++);
        
        //Nodo n13 = new Nodo("SENTENCIA");
        //n13.setNumNodo(parser.contador++);
        //n13.addHijo((Nodo) n1);
        n12.addHijo((Nodo) n1);
        n12.setNumNodo(parser.contador++);
        

        Nodo n14 = new Nodo("Llave_c");
        n14.setNumNodo(parser.contador++);
        n14.setValor("}");
        tmp.addHijo((Nodo) n14);
        tmp.setNumNodo(parser.contador++);

        parser.padre = (Nodo) tmp;
        RESULT = tmp;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

